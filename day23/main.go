// 459.重复的子字符串

package main

import (
	"fmt"
	"strings"
)

func main() {
	fmt.Println(repeatedSubstringPattern("abab"))
	//fmt.Println(repeatedSubstringPattern("rstvvqxwwytlhtmddecbeluloucjbnjrltxkwykjehlpnioghuarrnitpgbxkjvenuphpmpszyospiyeitiyodcpnynckdqxozqmgghogviwkauvzwjvuihndwnrlloucyqtppcrdhhotkymwamdqldmtnldlggfbfoojtsijkojrshbsmsmgtbjmggdfcfdekinrctgnuflwczcefledrknbwmsaduuqmlcbnzqkfvvghyspeujnguhillguzbfoshebuydkpsojvxcuirihjidvjkjnedhgmdlxbabnlbdtacanykejyahlkkifyjrqrdootrbjomjbgglunxilrahojxughookuhtbktanideubykfldptffrqazpqouexopcjwskakvpjfsjfkwdptdxerdgbkvjemfmpnologehchcwjqfwqmrodnsavyqyjulkedicuwwkuqtflpykmdxomrfwavtsehwqfutezytvuyxeyioljqmkkyyvnaltuhskpcsrxemjwlqauqppofkkhrwjjxyikqvllqjcuwlkxyvvomkbclxnfufnxwephybchgmcnlcnjhqlfcinuikqzeeiupmcxbhsxkhooxgzyjppkdnqonfcjgvywdduxtitbvbrzuaqkvgkeukhnxdpniyrofwbcvszwrhdsjnjxdgmozyjmmqesmkmpqkachcczlsmvudxnevhprzvurwrjkwchweosteewlufwplswtcovjbglmataxbgxolcjkrmuhrshrxtppawguptnnkchcsdorotbrixvdhzuyqyquyllijrnqdyppasqogtejplkosjuyoxmpnmeciykzwhafecdthfzqptjqleagydeixkzuceniluoarzxmdbipvqhrgukiyqpgkaqrxkyyrixhpiijqlmylikaxprqbbbrrnaldymccagmmskisbgnxqbvqvdnpaonwavamtwhcumpdlawgbrirzggddhciauwvvvesuqokuusjolfilheeerunywbewyvooayegiscyrcjutxkyovrztmeiwkbwmxvgzkcpniwtdmtmnzhzxnqnaterhyhajnzddnhktvfgfxjfzwlspmkbpexsycykwhycufivauovumdnkmznbjkocinyjqocxcerxsuacozbvckflnhwpitiypbnykcwuvrpbpdktpztmvaqqqpyxtayouyyngzyszorrynhzcxkarmewxbjzkzsuwsfguwubbffcasxozaqzjiijsvnkkbgmfrocfmkxypefvkxnfhdoqrxmibqlrcnnkbkyghxdkbxabtefhxithrbhlyjnthvbztadudjkpxpdknpudwltdhjtugzujnewmkxdyocwmhndebvoiderilgmtdwchrfihrmmztglrvtuyhqenpbnandznjevgqsuufcdcnzbwohrfapfodnqrnlkkkmuthbjkiddbcyrtqolaxozopxwapvwdnzoqxfjczsfgsiosahqsnfzbdkihdtytvrrrmvlymywcbrvssqpbqbotvaqpqywebiyymzlpguemcgwldxjrtgegobaocfqibinyuneoyzyghexdhnjklaabaseelxetappktcidpvigmeyfdugceaviyptgrqfktwhlaholatcnrwkdkpcsddxtfsqbchnbazlvorzsmfflooecqcyonqdkcoxdmwtdkzfwhnpexrlykytramordfiecgmyxmdrmaalvseklmtbnfcrbhcmgaluxdvmyhflxatcgjejclgsptscqgdemouqisubthcluerdhxhekelvenigatnzefhbavmwajegzqxmmdhgmlmnndbnqhicrrwtgljgirobgexpmzkaklgryrkueolokwaazfxbfbyrurzzojuoeliexgwvxcwrjvyisvvzsvsthaoarrgykkrezkknlxgcprfruhxkafxlfepleqvpfptheypdqelfjteqvtpmxnuyvxqmjprcieqidceeqdpzylpuisewzpwujyetvavgvsyknglxdhmrnnuxfgmqzgheljmugsdrbreckdynrmuegyurtnwhplcziosbjegdaygtshhhibqsjgfywnigbdjruqfktbhpptocpaoqdmzeluqptljcyjnibwtqpkhwvqgiwgrbdfqaxumjkdmvrrhpvbyuwodctkzoxqegosuauqwssouhejzqyeaidtshdcifdngnxzejshsdojfxxmwioqqctcchdqtnmbacoqtjxiaymkxbznwezpsoonlluqawvezoekiwymibqudloejfoqvygcoqaokoqzopyqnyywuntvcvxagbktwwmkfkkvguyepmxkvujczbaooskewkvxykdeidnemgnbhypxpzgkifgxlxkttrlpyjnedsbhdkeurzefnrtikmrglctmlrgubxsrqfswbyeiwueymhqoxnnmgjvqfdramurslxfokenqlxfkmbbuyiwlyuczssxidjedkrrtbjnjjovykqyosvjzaxhqtnzrpyxtzpudmlklwvvvamqdrjonmtrkaghrirwytupnbpvfgvuecujtbsrlndafiqzijiqjkrhuqluvzfiibdydrzjmtqhygqwsgjhhwnubkbqpgmzdbtiuipwhpvpcmjfnvbftfvlryzphvgxkvzdalznizsbrnlllwbezeqxrrkjfvbqhhqymwykacrxqvezkktxaftypzqthkplgrqbrqdlcmnvyhwuecsbovrneuzxmtpfrcxbjozpoqneifyrkvrrrgcgnniwvatsincxnxikcfpghhrtgqyldbgvzjwfxgdrqhkbyhbcmxpkayhcpxgrjhtpmvtztwizkuwdyafphdujphgsikzfcnsddwldyzoefiunwcndijukmgqhmfusykdprprxjmsrqkkroiyuziaxxvmrpjnvycfmprxkeghhtzlrbznwjsjvmhifbmxomlleuqkmydilxkisgktfjgxmeskqdqapszefjaxmzswovzmrnxnrmklmzkgiijywfitfjqaunpwfiimwnwpergctopcbyuwqivtmoyzqdhwlmqpxajchmzlyipavbkjjrtuarwllkhnubhdmomtxpzhpjdktonjzivmadfgkipgqmqaclttvqmxdoqbtcrcwbktrudhgzrkbgvzfzurwhenisrsghiltsblblmmrjeyixsrowtqotbllbwngtfvcffkpbxanmnmgbzqbdawdytgmsaqnldkrjrdcvdefxhhwvjikevbxoxmfrisghtppxmaisyesluodaqnuvzhiyjhfgtdspzzqbxzikhflmqkojbbapugbrkinslotdmfirjgeblyrvfufckzjrkwnfrveytccjpwvktixalpekygtunleysakzbcaakjsgbszuqeoidqqeypfcqlkbxtkpromxcpzavqvhkcgrnzldjqxvtilennmgwbvmezvbacvdjeahzhdslnqtejtsncdshjxrwaldmwggdmefgshazrfuvrpilvadzznatldrxxhsnztvvqdifjlufeacighttujqygltotlupvgxbtdiljfaprvxytkrdlktjfbceyrkvyqnbmssaucoovrssmnzboqmvpdqsionefmughyjlyuupjyiklsprjzgcdykmxncszrldjytrblntzvdrqzfygdwetkjzmppeyjluvclcdixqjuyjhrqqpqhuwzmpikpfkevrxvybjpnwzbgfwlplafbslhjwlvommelhwbzibqgcdcmnbnhnttroecgysjvbwizfhjmzyddgztzpydchhxbfcdukhrtfnjlynqpbhprwmontrjdloxdfzlnqbfmvglrhmaohjgvalxlxjjvzsuifyffxpsijfaovkmeabtkpxnixplnakjohobcnefuowlvmiwhdfabienqkjgzpaujazcyfnhrtbtsbyhnocemhtknzizzootmmkljrxhdpvbsynasamkamyjiryreysoxgognbqlvwldnyheaocxwmtnpdsekajfezbjujluigkofjmdkgjybcsqszvbvnyymtkqdufitvewanelrtxzuefunpenjmquikxlpcrtzscautvqmsevvkcwqyzdvzkomfahqcdgmthfrrjxmfuyonajvzmwwqtfcvhqranfsjbgqjvwvejbjlljenetqredxczrcshkuokhlruidkontvlrpwuxmmrgfigecbccqmnllrjhebikreubnotpjskfwjrtjeoqzrzwmobqgeryydlpqvymfvskeelyaiwcfkizgemqkvgsicuekzdjjxuspjthhyulwkrflcuimmmcmzgeghteagnhbbgrjsgboymcwusiphafwznxhtrpoblnukrhjsdvzqtalfhqwcnzvbmobzrivqjwuifktpfdchuyipllcmjoyemscundxakhconhibakifrrobrwlwnohgitbmdqyqunviwcadwczrkgbtafpjeltxpgxknsmmxpkzynjejhwqwiqgwaezryhpqgqqfeovjgnzhaaezabhnszorllteinuolfhbigrqfziuwlthqobrdrsbbbvgkpcbtrlhrveqzrgnwkzxvrgvcegfvgwnilhfgdsomieifrmkylrmqttzbfhvtgxbwwosgyujlstydqmtsfrsrgxpurukwvxwsbdygclvoqjwkkvhkswdobtgneskssdublzbbsxmvcjlesjhyvbwleliiyslnrsgnirwwkpdlgnwucztfxdmkbdmhifdprtvtgbemdeaiszkzhrvvpyrjeqdfhsileounkxffonygsimfoqqechebzvudhqqzxgjijyqtsgzhudwgnxbaffwornaosxbkazgbmkrlcnhyxzmxqzrbwkbkcuyhzbylajdfvzrbfgiyvvxunsvtpauljveopsxxxqxvanqeyxfnelbwzlldnimhhpdcxqmgtqeeleljvcyixbkdansetowaugioumnzqiqzfgblzqdworivstolpcykjfcijbdqqhuiowrypucogvjnhjogdlxtgnizpqqyjdlsknflrzackyavppywrzdcgcrgmolnymafihgshdtmfgpzmjucptnlkgqbhdobsldyiluxvtphgaaherofshnllsgllhqhogupspzdckhpkqjimemxtlgtjmpaofzwndnpkfgopddqeombllzrozgfqeekcgzbqhcetsxzxmzxklzvnlwktlfobonvndzqnyvbezkoabnrjtgioppivmqqpeymajwunzwretcjttildozxqipznvilxrzrzxataroctfllxpbsebtuhjoutbjiyhgnmzwnqasdufbdickgmicwpynowdgehoqikaxzynrqbdxxhymfncpgqozqtqgzvzyfmslcupsnhkrzcwnmqgdfsavohvzazqatuqpxwfuttrzsaofpawhvsmipxvxvyfedqdhbalxtanejecbbmlnspsaboxjeppsmghputjbmelxrpvjuoysvlbwsofkkvnzacluegaiqaywdvggckfqlcanekpniucettsmoggiemgyqxxsrheooefzdbqfubemxcwusvrpjdghvcnmkbrfzcyokiyzisxjuktbcupxzpjhwatcblyeeijffkmwwruwijjkauobwokgpgdvmldeduwtghhmzslfaghewbnoerfwuxwgldqnwirwrsoojjsxcsvbqtwmvaxhcwskxskxssxrpspigypytifqpakojzftwexmgwsfiffaevdllauucdjhqlchqaylwezurxzqeraesouocqkdbqvxgrcrexqlhwtdwlhwqolaxjqhywlqehptfcsmrhzfegfoqlskztqoszxkfmbowbjylgpblqswwcxuyheijaefmbawkygywpbjahrqxxiwspwdbyixctsqluukxpjtkkwxoxhqtgrtnyrcrfdhapcxkfhwvdlwetfwhikzvweeuiuvsdsztcapqluqxmmaczrmnwqriccvgmmrsaturedfzrfijwmylitgvfdehrbbclhynwjcrdrxmgxpnchzquyqoqbktgugkdrrjwtqzocmkcqesjlehqgszgysjpmzfjmztwuzstrzruddzeybwagexchxpdwpeaktutyinjcgkxkhbzraalwfyfapftrcvycjvjtttewspkhtzfwcyvqjrymokzduocylwcsnkqogibpzpcavlylcicwedfvguyoexxykptwnwfljxkmmajmzfvbedvjupcbbseeoopgevbujgiavtkztuopxhpxhryvalloikwnimuqrufrcbptmezbrzlzncisppuxnthshgfbbqqctxmfkuxtsqxzsiejaprtcuxsggljrfvtvhivtnzmnqspegwbofsknugtkbcfnqvbezwpjvvwagtkuzxufikuaadyljecssyylezgqrnlqrrniqttbwzgbvfxqlbiruxqtumuucjwdbmokbpelrbatmmkkazsnevbtaigzmkyayipufpxzeqlhsxhgbyfhwapszhyfzpyyambanjvibvwfrhexxyohitjdnbklxubplbvbyvkgcgdnldxpdkbvnhfoirwurjuewljvskpmfnlzldpxuotmvgqsbtfxhexwjxmuevhzyrujushoaqpocupphieywcbdobpwctmmiyvznjtkrewacapfcmzhnyhrjrcykcifycelieifsluvzprvjiqxczippcmjucxverwsormcgdpbvzknfdlygymdcsjymighprqdzkmpdbnstdrqdjblbohztqbwzqpqqmoqjmpejpmlkkcasicudwmivlwzaojvyusoetpjjyvbjwncigkhvzkcdrfnjjodgjohmbzvrbsemfscokwgngcaedwqutsqjlogqcrtarwsayntzlwwyhmdulsuhwhjvcwzxgasuhjbczvhcsdvcispwfjjrmywsemfdijjivmkolonobzwpoyytfqlpveidclrblckgvwenlwddaqnfmtzlgsbpkpcwycrkyarqbijqyimiqorfjrjzulwivsfhywnavzyoyoqrahbkznvowlntioypldfaazwreonbtkpoyxbdsvmynbpvwzyubfeqdjqmsbtqdyieqelqsceulcjjzahdihyekmruvpfjcjrwwqdqurwwyifvcqjstzqpwyviqhsnulholfavxnkcvqkheblfyuclbrzshaqwbhzxqtshfojurxfmgpajyudvdjelnadfqfniayatkqaqaszjbgyyqznyefinohdxpejogsdjffcvijmrtjomtojamtpzpgxgadwxfgaexbcvporuwpnphbseozraapldxelprladsjcktylhqfoynbyripybstkfknfqnjtniyqcuumgvglpylieicfjxpgtrpbuvuenljyvnvijfkawkmgeoypgckhwzqvlxgzlbbqietgimvqtmxncnvgpufeapwjzaojeencseqzhzdnhxwughidbhuqnrotyeeoljzxjaamzrcmxhvscdjuxirruhndavpzfwxvrppwzvggwvkiirggjfjjbqctlqposdkkxjenwftzljpubgehlbkhmdwdkmnoriksqdtksjqyylersqdyijuknvlhfacggysnehzupbemkycmlpbleifltmwmuamcqldrdbbucqlbuaptstbntbmshgdanpmuqjzfwcnngvlgqnscfjksgchysqyphaanwocqbjjfpinxaernbojogbrzytyisljzcaduvenqungqotgpfzokgxbyxuiyamfuwpretfofmfrtgewwvorrrqbcqfrauzjwjyskacjfovmtkdsncssytwxgrkderqxqvntwsrkjynrrbneqekevhivjqoqmtszhutuaknbsioytooglxpivwvyobaaqwfstdkyczhgodimvxgfvrzxntygiooedkmcrveujaupgiemzeoxbpmuspzkpmxoaltmalyjleodcjgwkgjjobqtbzqoxgcqeadccaouggbdxzqimafchcknlotzoywzgshtnvznahsauujpmfpklqpdvkuusvixzfljnerdbwnbpueninsrkrkhkuusuutbgkezsipkjludywcbdbrgaueqrybiqsoxlawqcuhpybnkgymbplykbroxizfnpknszoclsujcytidvrlsydjqvjjzqjyccskcrzuxbmpglmdyqghzuadgzytcducndmhlcvuvxtwchcpvaccjtdsxcjqrsffgxzgjmrwrfuzmqrjufcqoicnxkdnxrxvfwfeniipjwwootbxxvdpfycrundoidrkwhaqngtlgogniqekmckvkjhxtezvowfrhefizlhsobjsfrcsxrxqsrekkepimfdcwtckxjdlflhziftclphgqqkfjwhzqrnyowmeusivizaecwbdfkwwueiodkpogccamsuesarnsvrffyedfwqoegloesecdeunhlynqlsbtpdrgiofqxltlwzwufbgqbxrcokiydhazqjuhtihxcommxzdrjbzlwcicxnrsijpvhdjktdrooismdxbrklkvpslebqcnjrrqngwkhqseptwfzocwdlnjjvulewqhkvhosoexgntycmjfiqklrumkhwaoxkwvzjzenenzmboeztizyfcvjsqwvswowkvsuksuzrtwdivzinqujrkvmybctbaqdphgmsztxjrsmvievafsgsyaijzzreaxqggorhzfysawuoporjqarjivbcugnuxaoawiqpspqccchjevkcszmojwujvncapiklzsuogxkiahniulbpeinwqxagkngrkqditiunzyvtiqbdnxndzggftlbhwpjyaumhwfohavyfityargqcavusyziimrgsxtvanjqugunhzwatklccmbvevkyiivcyqnujlulnitqqgxsarcblcuirbtxakupvpszrfgynonjttubbepacmipqlhoztcgnliniqjcbqkwfxapkppxfkxlpmxpqyyimiblivnyvmdfwzxzqnzljhruweytcmktaxpmurkynjydrfdyyhhvucivavxvipqblxoenfgycdleznucojoycxgruogozk"))
}

// 暴力
func repeatedSubstringPattern1(s string) bool {
	newS := []rune(s)
	length := len(newS)

	for i := 1; i <= length/2; i++ {
		substr := string(newS[0:i])
		allRepeat := true

		if length%i != 0 {
			continue
		}

		for j := 1; j < length/i; j++ {
			if string(newS[j*i:(j+1)*i]) != substr {
				allRepeat = false
				break
			}
		}

		if allRepeat {
			return true
		}

	}

	return false
}

// 移动匹配
// 判断字符串s是否有重复子串组成，只要两个s拼接在一起，里面还出现一个s的话，就说明是又重复子串组成。
// 掐头去尾
func repeatedSubstringPattern2(s string) bool {
	news := s + s
	return strings.Contains(news[1:len(news)-1], s)
}

func repeatedSubstringPattern(s string) bool {
	news := s + s
	return contains(news[1:len(news)-1], s)
}

func getNext(s string) []int {
	ns := []rune(s)
	next := make([]int, len(ns))

	j := 0 // 代表后缀最后一个位置
	next[0] = j
	for i := 1; i < len(ns); i++ { // i 代表前缀最后一个位置

		// 如果不相同，要回退
		for j > 0 && ns[i] != ns[j] {
			j = next[j-1] // 这里要找的是前一位
		}

		if ns[i] == ns[j] {
			j++
		}

		next[i] = j
	}

	return next
}

func contains(str, substr string) bool {

	s, sub := []rune(str), []rune(substr)
	next := getNext(substr)

	j := 0
	for i := 0; i < len(s); i++ {

		for j > 0 && s[i] != sub[j] {
			j = next[j-1]
		}

		if s[i] == sub[j] {
			j++
		}

		if j == len(sub) {
			return true
		}
	}

	return false
}
